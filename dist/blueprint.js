var I=(async()=>{return}).constructor,J=(K,D)=>{const{Component:E,elements:G,vars:b}=D,{span:z,slot:H}=G;class B extends E{test=null;delay=0;description="";status="";expect="true";static delay(g){return new Promise((q)=>{setTimeout(q,g)})}static styleSpec={":host":{display:"flex",margin:b.testMargin,gap:b.testGap,alignItems:"center",borderRadius:b.testRadius,color:b.textColor,background:b.testBg,padding:b.testPadding},':host [part="outcome"]':{borderRadius:b.testOutcomeRadius,padding:b.testOutcomePadding,fontSize:b.testFontSize},":host .waiting":{color:b.testWaitingColor,background:b.testWaitingBg},":host .running":{color:b.testRubbingColor,background:b.testRunningBg},":host .success":{color:b.testSuccessColor,background:b.testSuccessBg},":host .failed":{color:b.testFailColor,background:b.testFailBg},":host .exception":{color:b.testExceptionColor,background:b.testExceptionBg},":host slot":{display:"none"}};timeout;content=[z({part:"outcome"}),z({part:"description"},H())];constructor(){super();this.initAttributes("description","delay","status","expect")}run=()=>{if(clearTimeout(this.timeout),!this.test)this.test=new I(this.textContent);const g=JSON.parse(this.expect);this.status="waiting",this.timeout=setTimeout(async()=>{this.status="running";try{const q=JSON.stringify(await this.test());if(q===JSON.stringify(g))this.status="success";else this.status=`failed: got ${q}, expected ${this.expect}`}catch(q){this.status=`exception: ${q}`}},this.delay)};connectedCallback(){super.connectedCallback(),this.parts.description.textContent=this.description||this.textContent,this.run()}disconnectedCallback(){super.disconnectedCallback(),this.class,clearTimeout(this.timeout)}render(){super.render();const{outcome:g}=this.parts;g.textContent=this.status,g.setAttribute("class",this.status.match(/\w+/)[0])}}return{type:B,styleSpec:{":root":{_testGap:"8px",_testPadding:"8px",_testMargin:"4px 0",_testRadius:"4px",_testColor:"black",_testBg:"#eee",_testOutcomePadding:"0 12px",_testOutcomeRadius:"99px",_testFontSize:"14px",_testWaitingColor:"black",_testWaitingBg:"#ff04",_testRunningColor:"black",_testRunningBg:"#f804",_testSuccessColor:"black",_testSuccessBg:"#0f04",_testFailColor:"black",_testFailBg:"#f004",_testExceptionColor:"white",_testExceptionBg:"red"}}}},M=J;export{J as test,M as default};

//# debugId=6E4354BAC04FD7C064756E2164756E21
//# sourceMappingURL=blueprint.js.map
