var H=(async()=>{return}).constructor,I=(J,z)=>{const{Component:B,elements:D,vars:b}=z,{span:g,slot:E}=D;class q extends B{test=null;delay=0;description="";status="";expect=!0;static delay(d){return new Promise((G)=>{setTimeout(G,d)})}static styleSpec={":host":{display:"flex",margin:b.testMargin,gap:b.testGap,alignItems:"center",borderRadius:b.testRadius,color:b.textColor,background:b.testBg,padding:b.testPadding},':host [part="outcome"]':{borderRadius:b.testOutcomeRadius,padding:b.testOutcomePadding,fontSize:b.testFontSize},":host .waiting":{color:b.testWaitingColor,background:b.testWaitingBg},":host .running":{color:b.testRubbingColor,background:b.testRunningBg},":host .success":{color:b.testSuccessColor,background:b.testSuccessBg},":host .failed":{color:b.testFailColor,background:b.testFailBg},":host .exception":{color:b.testExceptionColor,background:b.testExceptionBg},":host slot":{display:"none"}};timeout;content=[g({part:"outcome"}),g({part:"description"},E())];constructor(){super();this.initAttributes("description","delay","status")}run=()=>{if(clearTimeout(this.timeout),console.log(this.test),!this.test)this.test=new H(this.textContent);this.status="waiting",this.timeout=setTimeout(async()=>{this.status="running";try{const d=JSON.stringify(await this.test());if(d===JSON.stringify(this.expect))this.status="success";else this.status=`failed: got ${d}, expected ${this.expect}`}catch(d){this.status=`exception: ${d}`}},this.delay)};connectedCallback(){super.connectedCallback(),this.parts.description.textContent=this.description||this.textContent,this.run()}disconnectedCallback(){super.disconnectedCallback(),this.class,clearTimeout(this.timeout)}render(){super.render();const{outcome:d}=this.parts;d.textContent=this.status,d.setAttribute("class",this.status.match(/\w+/)[0])}}return{type:q,styleSpec:{":root":{_testGap:"8px",_testPadding:"8px",_testMargin:"4px 0",_testRadius:"4px",_testColor:"black",_testBg:"#eee",_testOutcomePadding:"0 12px",_testOutcomeRadius:"99px",_testFontSize:"14px",_testWaitingColor:"black",_testWaitingBg:"#ff04",_testRunningColor:"black",_testRunningBg:"#f804",_testSuccessColor:"black",_testSuccessBg:"#0f04",_testFailColor:"black",_testFailBg:"#f004",_testExceptionColor:"white",_testExceptionBg:"red"}}}},L=I;export{I as test,L as default};

//# debugId=1B21EB72E0479BB264756E2164756E21
//# sourceMappingURL=blueprint.js.map
