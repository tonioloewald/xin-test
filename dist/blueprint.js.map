{
  "version": 3,
  "sources": ["../src/blueprint.ts"],
  "sourcesContent": [
    "import { XinBlueprint } from 'xinjs'\n\nexport type TestExpression = () => Promise<any> | any\n\nconst AsyncFunction = (async () => undefined).constructor\n\nexport const test: XinBlueprint = (tag, factory) => {\n  const { Component, elements, vars } = factory\n  const { span, slot } = elements\n\n  class XinTest extends Component {\n    test: TestExpression | null = null\n    delay = 0\n    description = ''\n    status = ''\n    expect = 'true'\n\n    static delay(ms: number): Promise<void> {\n      return new Promise((resolve) => {\n        setTimeout(resolve, ms)\n      })\n    }\n\n    static styleSpec = {\n      ':host': {\n        display: 'flex',\n        margin: vars.testMargin,\n        gap: vars.testGap,\n        alignItems: 'center',\n        borderRadius: vars.testRadius,\n        color: vars.textColor,\n        background: vars.testBg,\n        padding: vars.testPadding,\n      },\n      ':host [part=\"outcome\"]': {\n        borderRadius: vars.testOutcomeRadius,\n        padding: vars.testOutcomePadding,\n        fontSize: vars.testFontSize,\n      },\n      ':host .waiting': {\n        color: vars.testWaitingColor,\n        background: vars.testWaitingBg,\n      },\n      ':host .running': {\n        color: vars.testRubbingColor,\n        background: vars.testRunningBg,\n      },\n      ':host .success': {\n        color: vars.testSuccessColor,\n        background: vars.testSuccessBg,\n      },\n      ':host .failed': {\n        color: vars.testFailColor,\n        background: vars.testFailBg,\n      },\n      ':host .exception': {\n        color: vars.testExceptionColor,\n        background: vars.testExceptionBg,\n      },\n      ':host slot': {\n        display: 'none',\n      },\n    }\n\n    private timeout?: number\n\n    content = [span({ part: 'outcome' }), span({ part: 'description' }, slot())]\n\n    constructor() {\n      super()\n      this.initAttributes('description', 'delay', 'status', 'expect')\n    }\n\n    run = () => {\n      clearTimeout(this.timeout)\n      if (!this.test) {\n        // @ts-expect-error this works just fine\n        this.test = new AsyncFunction(this.textContent)\n      }\n      const expected = JSON.parse(this.expect)\n      this.status = 'waiting'\n      this.timeout = setTimeout(async () => {\n        this.status = 'running'\n        try {\n          const outcome = JSON.stringify(await this.test!())\n          if (outcome === JSON.stringify(expected)) {\n            this.status = 'success'\n          } else {\n            this.status = `failed: got ${outcome}, expected ${this.expect}`\n          }\n        } catch (err) {\n          this.status = `exception: ${err}`\n        }\n      }, this.delay) as unknown as number\n    }\n\n    connectedCallback() {\n      super.connectedCallback()\n      this.parts.description.textContent = this.description || this.textContent\n      this.run()\n    }\n\n    disconnectedCallback(): void {\n      super.disconnectedCallback()\n      this.class\n      clearTimeout(this.timeout)\n    }\n\n    render(): void {\n      super.render()\n      const { outcome } = this.parts\n      outcome.textContent = this.status\n      outcome.setAttribute('class', this.status.match(/\\w+/)![0])\n    }\n  }\n\n  return {\n    type: XinTest,\n    styleSpec: {\n      ':root': {\n        _testGap: '8px',\n        _testPadding: '8px',\n        _testMargin: '4px 0',\n        _testRadius: '4px',\n        _testColor: 'black',\n        _testBg: '#eee',\n        _testOutcomePadding: '0 12px',\n        _testOutcomeRadius: '99px',\n        _testFontSize: '14px',\n        _testWaitingColor: 'black',\n        _testWaitingBg: '#ff04',\n        _testRunningColor: 'black',\n        _testRunningBg: '#f804',\n        _testSuccessColor: 'black',\n        _testSuccessBg: '#0f04',\n        _testFailColor: 'black',\n        _testFailBg: '#f004',\n        _testExceptionColor: 'white',\n        _testExceptionBg: 'red',\n      },\n    },\n  }\n}\n\nexport default test\n"
  ],
  "mappings": "AAIA,IAAM,GAAiB,SAAS,CAAG,SAAW,YAEjC,EAAqB,CAAC,EAAK,IAAY,CAClD,MAAQ,YAAW,WAAU,QAAS,GAC9B,OAAM,QAAS,EAEvB,MAAM,UAAgB,CAAU,CAC9B,KAA8B,KAC9B,MAAQ,EACR,YAAc,GACd,OAAS,GACT,OAAS,aAEF,MAAK,CAAC,EAA2B,CACtC,OAAO,IAAI,QAAQ,CAAC,IAAY,CAC9B,WAAW,EAAS,CAAE,EACvB,QAGI,WAAY,CACjB,QAAS,CACP,QAAS,OACT,OAAQ,EAAK,WACb,IAAK,EAAK,QACV,WAAY,SACZ,aAAc,EAAK,WACnB,MAAO,EAAK,UACZ,WAAY,EAAK,OACjB,QAAS,EAAK,WAChB,EACA,yBAA0B,CACxB,aAAc,EAAK,kBACnB,QAAS,EAAK,mBACd,SAAU,EAAK,YACjB,EACA,iBAAkB,CAChB,MAAO,EAAK,iBACZ,WAAY,EAAK,aACnB,EACA,iBAAkB,CAChB,MAAO,EAAK,iBACZ,WAAY,EAAK,aACnB,EACA,iBAAkB,CAChB,MAAO,EAAK,iBACZ,WAAY,EAAK,aACnB,EACA,gBAAiB,CACf,MAAO,EAAK,cACZ,WAAY,EAAK,UACnB,EACA,mBAAoB,CAClB,MAAO,EAAK,mBACZ,WAAY,EAAK,eACnB,EACA,aAAc,CACZ,QAAS,MACX,CACF,EAEQ,QAER,QAAU,CAAC,EAAK,CAAE,KAAM,SAAU,CAAC,EAAG,EAAK,CAAE,KAAM,aAAc,EAAG,EAAK,CAAC,CAAC,EAE3E,WAAW,EAAG,CACZ,MAAM,EACN,KAAK,eAAe,cAAe,QAAS,SAAU,QAAQ,EAGhE,IAAM,IAAM,CAEV,GADA,aAAa,KAAK,OAAO,GACpB,KAAK,KAER,KAAK,KAAO,IAAI,EAAc,KAAK,WAAW,EAEhD,MAAM,EAAW,KAAK,MAAM,KAAK,MAAM,EACvC,KAAK,OAAS,UACd,KAAK,QAAU,WAAW,SAAY,CACpC,KAAK,OAAS,UACd,GAAI,CACF,MAAM,EAAU,KAAK,UAAU,MAAM,KAAK,KAAM,CAAC,EACjD,GAAI,IAAY,KAAK,UAAU,CAAQ,EACrC,KAAK,OAAS,cAEd,MAAK,OAAS,eAAe,eAAqB,KAAK,eAElD,EAAP,CACA,KAAK,OAAS,cAAc,MAE7B,KAAK,KAAK,GAGf,iBAAiB,EAAG,CAClB,MAAM,kBAAkB,EACxB,KAAK,MAAM,YAAY,YAAc,KAAK,aAAe,KAAK,YAC9D,KAAK,IAAI,EAGX,oBAAoB,EAAS,CAC3B,MAAM,qBAAqB,EAC3B,KAAK,MACL,aAAa,KAAK,OAAO,EAG3B,MAAM,EAAS,CACb,MAAM,OAAO,EACb,MAAQ,WAAY,KAAK,MACzB,EAAQ,YAAc,KAAK,OAC3B,EAAQ,aAAa,QAAS,KAAK,OAAO,MAAM,KAAK,EAAG,EAAE,EAE9D,CAEA,MAAO,CACL,KAAM,EACN,UAAW,CACT,QAAS,CACP,SAAU,MACV,aAAc,MACd,YAAa,QACb,YAAa,MACb,WAAY,QACZ,QAAS,OACT,oBAAqB,SACrB,mBAAoB,OACpB,cAAe,OACf,kBAAmB,QACnB,eAAgB,QAChB,kBAAmB,QACnB,eAAgB,QAChB,kBAAmB,QACnB,eAAgB,QAChB,eAAgB,QAChB,YAAa,QACb,oBAAqB,QACrB,iBAAkB,KACpB,CACF,CACF,GAGa",
  "debugId": "6E4354BAC04FD7C064756E2164756E21",
  "names": []
}